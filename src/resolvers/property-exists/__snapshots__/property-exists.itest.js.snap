// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query: propertyExists checks if property exists with valid data and information in the DB 1`] = `
Object {
  "data": Object {
    "propertyExists": true,
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Query: propertyExists checks if property exists with valid data and no information in the DB 1`] = `
Object {
  "data": Object {
    "propertyExists": false,
  },
  "errors": undefined,
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Query: propertyExists fails if input contains unrecognized field 1`] = `
Object {
  "data": undefined,
  "errors": Array [
    Object {
      "extensions": Object {
        "code": "GRAPHQL_VALIDATION_FAILED",
      },
      "locations": Array [
        Object {
          "column": 13,
          "line": 6,
        },
      ],
      "message": "Unknown argument \\"unkown\\" on field \\"Query.propertyExists\\".",
    },
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Query: propertyExists fails if input foreign id is invalid 1`] = `
Object {
  "data": null,
  "errors": Array [
    Object {
      "extensions": Object {
        "code": "BAD_USER_INPUT",
        "details": Array [
          Object {
            "context": Object {
              "key": "foreign_id",
              "label": "foreign_id",
              "value": "wrong ' 123",
            },
            "message": "\\"foreign_id\\" must only contain alpha-numeric characters",
            "path": Array [
              "foreign_id",
            ],
            "type": "string.alphanum",
          },
        ],
        "exception": Object {
          "details": Array [
            Object {
              "context": Object {
                "key": "foreign_id",
                "label": "foreign_id",
                "value": "wrong ' 123",
              },
              "message": "\\"foreign_id\\" must only contain alpha-numeric characters",
              "path": Array [
                "foreign_id",
              ],
              "type": "string.alphanum",
            },
          ],
        },
      },
      "locations": Array [
        Object {
          "column": 11,
          "line": 3,
        },
      ],
      "message": "Input validation failed",
      "path": Array [
        "propertyExists",
      ],
    },
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;

exports[`Query: propertyExists fails if input source is invalid 1`] = `
Object {
  "data": null,
  "errors": Array [
    Object {
      "extensions": Object {
        "code": "BAD_USER_INPUT",
        "details": Array [
          Object {
            "context": Object {
              "key": "source",
              "label": "source",
              "value": "malformed url",
            },
            "message": "\\"source\\" must contain a valid domain name",
            "path": Array [
              "source",
            ],
            "type": "string.domain",
          },
        ],
        "exception": Object {
          "details": Array [
            Object {
              "context": Object {
                "key": "source",
                "label": "source",
                "value": "malformed url",
              },
              "message": "\\"source\\" must contain a valid domain name",
              "path": Array [
                "source",
              ],
              "type": "string.domain",
            },
          ],
        },
      },
      "locations": Array [
        Object {
          "column": 11,
          "line": 3,
        },
      ],
      "message": "Input validation failed",
      "path": Array [
        "propertyExists",
      ],
    },
  ],
  "extensions": undefined,
  "http": Object {
    "headers": Headers {
      Symbol(map): Object {},
    },
  },
}
`;
