directive @auth(requires: String) on FIELD_DEFINITION | OBJECT

type Query {
  properties(filter: PropertyFilter, limit: Int): PropertyWrapper!
  building(id: Int!): Building @auth
  bounds(bounds: String!): Bounds! @auth
  point(lat: Float!, lng: Float!): Point! @auth
}

input PropertyFilter {
  created_at: FilterString
  published_at: FilterString
  location_classificator: FilterString
  region: FilterString @deprecated(reason: "Please use the new bounds API")
  category: FilterString
  type: FilterString
  rent_type: FilterString
  price: FilterInt
  calc_price_per_sqm: FilterInt
  rooms: FilterInt
  area: FilterInt
  floor: FilterInt
  source: FilterString
  url: FilterString
  foreign_id: FilterString
  building_id: FilterString
}

type PropertySummary {
  count: Int!
  price(discard: Float): PropertyPriceSummary!
}

type PropertyPriceSummary {
  count: Int
  min: Int
  max: Int
  mean: Int
  median: Int
  mode: Int
  standardDev: Int
}

type Property @auth(requires: "ReadPropertyData") {
  id: Int!
  url: String @auth(requires: "ReadPropertyData:Detailed")
  category: String
  type: String
  rent_type: String
  content: String! @auth(requires: "ReadPropertyData:Detailed")
  images: [String]! @auth(requires: "ReadPropertyData:Detailed")
  price: Float
  price_per_sqm: Float
    @deprecated(reason: "Please use the new calc_price_per_sqm field")
  calc_price_per_sqm: Float
  rooms: Int
  area: Float
  floor: Float
  lat: Float @auth(requires: "ReadPropertyData:Detailed")
  lng: Float @auth(requires: "ReadPropertyData:Detailed")
  published_at: String
  foreign_id: String @auth(requires: "ReadPropertyData:Detailed")
  building: Building
}

type PropertyWrapper {
  results: [Property!]! @auth(requires: "ReadPropertyData")
  summary: PropertySummary!
}

type Building @auth {
  id: Int!
  bounds: String!
  properties(filter: PropertyFilter): PropertyWrapper!
}

type Bounds {
  bounds: String!
  buildings: [Building!]! @auth
}

type Point {
  buildings: [Building!]! @auth
}

input FilterString {
  # equality
  eq: String
  neq: String

  # lexicographical comparison
  gt: String
  gte: String
  lt: String
  lte: String

  in: [String]
  nin: [String]
}

input FilterInt {
  # equality
  eq: Int
  neq: Int

  # lexicographical comparison
  gt: Int
  gte: Int
  lt: Int
  lte: Int

  in: [Int]
  nin: [Int]
}
