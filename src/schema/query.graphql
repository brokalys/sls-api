scalar Date

type Query {
  getRegions(
    category: Category
    type: Type
    start_date: Date!
    end_date: Date!
  ): [RegionStats!]

  getRegion(
    name: String!
    category: Category
    type: Type
    start_date: Date!
    end_date: Date!
  ): RegionStats!

  getMapData(
    category: Category!
    type: Type!
    start_date: Date!
    end_date: Date!
  ): MapData!

  getChartData(
    category: Category!
    type: Type
    date: Date!
  ): ChartData!

  getPropertiesForPinger(
    start_date: String!
    category: ExtendedCategory!
    type: Type!
    region: String!
    price: MinMaxRange
    rooms: MinMaxRange
    floor: MinMaxRange
    area: MinMaxRange
  ): [PropertyData!]

  propertyExists(
    source: String!
    url: String
    foreign_id: String
    created_at: String
  ): Boolean!

  properties(filter: PropertyFilter): Properties!
}

input PropertyFilter {
  published_at: FilterString
  region: FilterString
  category: FilterString
  type: FilterString
  price: FilterInt
  rooms: FilterInt
  area: FilterInt
  floor: FilterInt
}

type PropertySummary {
  count: Int!
  price: PropertyPriceSummary!
}

type PropertyPriceSummary {
  median: Int
}

enum Category {
  APARTMENT
  HOUSE
  LAND
}

enum ExtendedCategory {
  APARTMENT
  HOUSE
  LAND
  GARAGE
  OFFICE
}

enum Type {
  SELL
  RENT
}

type RegionStats {
  name: String!
  price: RegionPriceStats
  price_per_sqm: RegionPriceStats
}

type RegionPriceStats {
  count: Int!
  min: Float
  max: Float
  mean: Float
  median: Float
  mode: Float
  standardDev: Float
}

type MapData {
  type: String!
  features: [MapDataFeatures!]
}

type MapDataFeatures {
  type: String!
  properties: MapDataFeatureProperties!
  geometry: MapDataFeatureGeometry!
}

type MapDataFeatureProperties {
  name: String!
  color: String
  histogram: MapHistogram
}

type MapHistogram {
  values: [Int]!
  bins: Int!
  bin_width: Float!
  bin_limits: [Float]!
}

type MapDataFeatureGeometry {
  type: String!
  coordinates: [[[Float!]]]
}

type ChartData {
  count: Int!
  price_per_sqm: Float!
}

type TableData {
  name: String!
  price_per_sqm: SellRent
  price_per_sqm_change: SellRent
  btl_ratio: Float
  btl_ratio_change: Float
}

type SellRent {
  sell: Float
  rent: Float
}

type PropertyData {
  id: Int!
  url: String!
  content: String!
  images: [String]
  price: Int!
  rooms: Int
  area: Int
}

type Properties {
  results: [PropertyData!]
  summary: PropertySummary
}

input MinMaxRange {
  min: Int
  max: Int
}

input FilterString {
  # equality
  eq: String
  neq: String

  # lexicographical comparison
  gt: String
  gte: String
  lt: String
  lte: String

  in: [String]
  nin: [String]
}

input FilterInt {
  # equality
  eq: Int
  neq: Int

  # lexicographical comparison
  gt: Int
  gte: Int
  lt: Int
  lte: Int

  in: [Int]
  nin: [Int]
}
