service: sls-api
useDotenv: true

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 7
  versionFunctions: false
  timeout: 10
  logs:
    restApi: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - SNS:Publish
          Resource: 'arn:aws:sqs:eu-west-1:*:*'
  apiGateway:
    shouldStartNameWithService: true
    apiKeys:
      - slsPinger:
          - name: ${self:provider.stage}-slsPingerKey
            description: API key used by sls-pinger
      - slsCrawler:
          - name: ${self:provider.stage}-slsCrawlerKey
            description: API key used by sls crawlers
      - slsDataExtraction:
          - name: ${self:provider.stage}-slsDataExtractionKey
            description: API key used by sls-data-extraction
      - slsStaticApi:
          - name: ${self:provider.stage}-slsStaticApiKey
            description: API key used by sls-static-api
    usagePlan:
      - slsPinger:
          quota:
            limit: 2000000
            offset: 1
            period: MONTH
          throttle:
            burstLimit: 2000
            rateLimit: 1000
      - slsCrawler:
          quota:
            limit: 2000000
            offset: 1
            period: MONTH
          throttle:
            burstLimit: 1000
            rateLimit: 500
      - slsDataExtraction:
          quota:
            limit: 200
            offset: 1
            period: MONTH
          throttle:
            burstLimit: 10
            rateLimit: 10
      - slsStaticApi:
          quota:
            limit: 10000
            offset: 1
            period: MONTH
          throttle:
            burstLimit: 200
            rateLimit: 200
  environment:
    STAGE: ${opt:stage, 'dev'}
    DB_HOST: ${env:DB_HOST}
    DB_DATABASE: ${env:DB_DATABASE}
    DB_USERNAME: ${env:DB_USERNAME}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_PINGER_DATABASE: ${env:DB_PINGER_DATABASE}
    BUGSNAG_KEY: ${env:BUGSNAG_KEY}
    PINGER_PROPERTY_QUEUE_NAME: ${env:PINGER_PROPERTY_QUEUE_NAME}

functions:
  graphql:
    name: ${self:provider.stage}-GraphQLApi
    description: GraphQL API of Brokalys.
    handler: src/handler.graphqlHandler
    events:
      - http:
          path: /
          method: post
          cors: true
      - http:
          path: /
          method: get

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-plugin-aws-alerts
  - serverless-offline
  - serverless-layers

custom:
  customDomain:
    domainName: api.brokalys.com
    stage: prod
    certificateName: '*.brokalys.com'
    createRoute53Record: true
    endpointType: edge

  alerts:
    stages:
      - prod
    topics:
      alarm:
        topic: ${self:provider.stage}-${self:service}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com
      ok:
        topic: ${self:provider.stage}-${self:service}-alerts-ok
        notifications:
          - protocol: email
            endpoint: matiss@brokalys.com
    definitions:
      functionErrors:
        description: 'SLS API has an error that needs to be fixed'
        treatMissingData: notBreaching
        evaluationPeriods: 10
        datapointsToAlarm: 5
    alarms:
      - functionErrors

  serverless-offline:
    useChildProcesses: true
    httpPort: 8000

  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: false
    packager: yarn

  serverless-layers:
    packageManager: yarn
    dependenciesPath: ./package.json
    layersDeploymentBucket: ${self:provider.stage}-brokalys-lambda-layers
    customInstallationCommand: yarn install --production --ignore-scripts

resources:
  Resources:
    GraphqlAsyncConfig:
      Type: AWS::Lambda::EventInvokeConfig
      Properties:
        FunctionName:
          Ref: GraphqlLambdaFunction
        MaximumRetryAttempts: 0
        Qualifier: $LATEST
